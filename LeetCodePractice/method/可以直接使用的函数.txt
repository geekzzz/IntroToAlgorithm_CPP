isalnum 判断是否为字母或数字

toupper 大小写字母全部转大写

to_string 转string

reverse(.begin(),.end()) 反转

string 类 find_first_not_of 以及find_last_of   以及 find_first_of   substr(i,j)返回从i开始长度为j的字符串

unique ,unique的作用是“去掉”容器中相邻元素的重复元素（不一定要求数组有序），它会把重复的元素添加到容器末尾（所以数组大小并没有改变），而返回值是去重之后的尾地址。例如：unique(res.begin(), res.end())

abs 返回绝对值stdlib.h math.h   \\abs(INT_MIN) 等于 INT_MAX + 1 注意特殊情况
labs long类型的abs

int sum = accumulate(vec.begin() , vec.end() , 42);  #include<numeric> 头两个形参指定要累加的元素范围，第三个形参则是累加的初值。string sum = accumulate(v.begin() , v.end() , string(" "));这个函数调用的效果是：从空字符串开始，把vec里的每个元素连接成一个字符串。

fill(vec.begin(), vec.end(), val); //原来容器中每个元素被重置为val,给出开始和结束，然后中间全部填val    #include<algorithm>

fill_n(vec.begin, 10, val); //从开始迭代器开始，添加n个val

nth_element(a+l,a+k,a+r) // #include<algorithm> a这个数组中区间(l,r)内的第k大的元素处在第k个位置上(相对位置)

lower_bound( begin,end,num)：从数组的begin位置到end-1位置二分查找第一个大于或等于num的数字，找到返回该数字的地址，不存在则返回end。通过返回的地址减去起始地址begin,得到找到数字在数组中的下标。
upper_bound( begin,end,num)：从数组的begin位置到end-1位置二分查找第一个大于num的数字，找到返回该数字的地址，不存在则返回end。通过返回的地址减去起始地址begin,得到找到数字在数组中的下标。
在从大到小的排序数组中，重载lower_bound()和upper_bound()

lower_bound( begin,end,num,greater<type>() ):从数组的begin位置到end-1位置二分查找第一个小于或等于num的数字，找到返回该数字的地址，不存在则返回end。通过返回的地址减去起始地址begin,得到找到数字在数组中的下标。

upper_bound( begin,end,num,greater<type>() ):从数组的begin位置到end-1位置二分查找第一个小于num的数字，找到返回该数字的地址，不存在则返回end。通过返回的地址减去起始地址begin,得到找到数字在数组中的下标。